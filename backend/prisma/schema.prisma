generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
///  * =========================
///  * Core auth / people
///  * =========================
model User {
  id           Int                  @id @default(autoincrement())
  name         String
  email        String               @unique
  password     String
  role         Role                 @default(STUDENT)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  auditLogs    AuditLog[]           @relation("AuditByUser")
  helpRequests HelpRequest[]
  resetTokens  PasswordResetToken[]
  staff        Staff?
  student      Student?
}

model Student {
  id              Int          @id @default(autoincrement())
  rollNumber      String       @unique
  address         String?
  admissionYear   Int
  category        Category?
  city            String?
  currentSemester Int
  dob             DateTime?
  gender          Gender?
  guardianEmail   String?
  guardianName    String?
  guardianPhone   String?
  photoUrl        String?
  pincode         String?
  programId       Int
  sectionId       Int?
  state           String?
  userId          Int?         @unique
  attendance      Attendance[]
  enrollments     Enrollment[]
  feedbacks       Feedback[]
  marks           Mark[]
  messages        MessageLog[]
  results         Result[]
  leaveApplications LeaveApplication[]
  program         Program      @relation(fields: [programId], references: [id])
  section         Section?     @relation(fields: [sectionId], references: [id])
  user            User?        @relation(fields: [userId], references: [id])
}

model Staff {
  id                 Int               @id @default(autoincrement())
  employeeId         String            @unique
  designation        String
  departmentId       Int
  emailAlt           String?
  joiningDate        DateTime?
  phone              String?
  photoUrl           String?
  qualification      String?
  userId             Int?              @unique
  assessmentsCreated Assessment[]
  auditLogs          AuditLog[]        @relation("AuditOnStaff")
  sessionsTaken      ClassSession[]    @relation("SessionTakenBy")
  feedbacks          Feedback[]        @relation("FeedbackToStaff")
  leaveApplications  LeaveApplication[]
  department         Department        @relation(fields: [departmentId], references: [id])
  user               User?             @relation(fields: [userId], references: [id])
  assignments        StaffAssignment[]
}

/// *
///  * =========================
///  * Academic structure
///  * =========================
model Department {
  id       Int       @id @default(autoincrement())
  code     String    @unique
  name     String
  programs Program[]
  staff    Staff[]
}

model Program {
  id                Int        @id @default(autoincrement())
  code              String     @unique
  name              String
  durationSemesters Int
  departmentId      Int
  department        Department @relation(fields: [departmentId], references: [id])
  results           Result[]
  sections          Section[]
  students          Student[]
  subjects          Subject[]
}

model Section {
  id           Int               @id @default(autoincrement())
  name         String
  academicYear String
  semester     Int
  shift        Shift?
  programId    Int
  assessments  Assessment[]
  sessions     ClassSession[]
  enrollments  Enrollment[]
  program      Program           @relation(fields: [programId], references: [id])
  assignments  StaffAssignment[]
  students     Student[]
}

/// *
///  * =========================
///  * Subjects & teaching assignment
///  * =========================
model Subject {
  id             Int               @id @default(autoincrement())
  name           String
  code           String            @unique
  practicalHours Int?
  programId      Int
  semester       Int
  theoryHours    Int?
  assessments    Assessment[]
  attendance     Attendance[]
  sessions       ClassSession[]
  feedbacks      Feedback[]
  assignments    StaffAssignment[]
  program        Program           @relation(fields: [programId], references: [id])
}

model StaffAssignment {
  id        Int            @id @default(autoincrement())
  staffId   Int
  subjectId Int
  sectionId Int
  termId    Int
  active    Boolean        @default(true)
  sessions  ClassSession[]
  section   Section        @relation(fields: [sectionId], references: [id])
  staff     Staff          @relation(fields: [staffId], references: [id])
  subject   Subject        @relation(fields: [subjectId], references: [id])
  term      AcademicTerm   @relation(fields: [termId], references: [id])

  @@unique([staffId, subjectId, sectionId, termId], name: "uniq_assignment")
}

model AcademicTerm {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  startDate   DateTime
  endDate     DateTime
  assessments Assessment[]
  sessions    ClassSession[]
  enrollments Enrollment[]
  feedbacks   Feedback[]
  results     Result[]
  assignments StaffAssignment[]
}

/// *
///  * =========================
///  * Enrollment (history-friendly)
///  * =========================
model Enrollment {
  id        Int              @id @default(autoincrement())
  studentId Int
  sectionId Int
  termId    Int
  status    EnrollmentStatus @default(ACTIVE)
  section   Section          @relation(fields: [sectionId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id])
  term      AcademicTerm     @relation(fields: [termId], references: [id])

  @@unique([studentId, sectionId, termId], name: "uniq_student_section_term")
}

/// *
///  * =========================
///  * Class sessions & attendance
///  * =========================
model ClassSession {
  id             Int              @id @default(autoincrement())
  sectionId      Int
  subjectId      Int
  takenByStaffId Int
  termId         Int
  scheduledAt    DateTime
  durationMin    Int?
  room           String?
  assignmentId   Int?
  attendance     Attendance[]
  assignment     StaffAssignment? @relation(fields: [assignmentId], references: [id])
  section        Section          @relation(fields: [sectionId], references: [id])
  subject        Subject          @relation(fields: [subjectId], references: [id])
  takenBy        Staff            @relation("SessionTakenBy", fields: [takenByStaffId], references: [id])
  term           AcademicTerm     @relation(fields: [termId], references: [id])

  @@unique([sectionId, subjectId, scheduledAt], name: "uniq_session_time")
}

model Attendance {
  id        Int              @id @default(autoincrement())
  status    AttendanceStatus
  studentId Int
  subjectId Int
  markedAt  DateTime         @default(now())
  sessionId Int
  session   ClassSession     @relation(fields: [sessionId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id])
  subject   Subject          @relation(fields: [subjectId], references: [id])

  @@unique([sessionId, studentId], name: "uniq_session_student")
}

/// *
///  * =========================
///  * Assessment & marks
///  * =========================
model Assessment {
  id          Int          @id @default(autoincrement())
  name        String
  date        DateTime
  maxMarks    Int
  weightage   Float?
  sectionId   Int
  subjectId   Int
  termId      Int
  createdById Int
  createdBy   Staff        @relation(fields: [createdById], references: [id])
  section     Section      @relation(fields: [sectionId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  term        AcademicTerm @relation(fields: [termId], references: [id])
  marks       Mark[]

  @@index([sectionId, subjectId, termId])
}

model Mark {
  id            Int        @id @default(autoincrement())
  assessmentId  Int
  studentId     Int
  marksObtained Int
  assessment    Assessment @relation(fields: [assessmentId], references: [id])
  student       Student    @relation(fields: [studentId], references: [id])

  @@unique([assessmentId, studentId], name: "uniq_assessment_student")
}

/// *
///  * =========================
///  * Result (final per term)
///  * =========================
model Result {
  id          Int          @id @default(autoincrement())
  studentId   Int
  termId      Int
  programId   Int
  totalMarks  Int
  maxMarks    Int
  percentage  Float
  grade       String?
  publishedAt DateTime?
  createdAt   DateTime     @default(now())
  breakdown   Json?
  program     Program      @relation(fields: [programId], references: [id])
  student     Student      @relation(fields: [studentId], references: [id])
  term        AcademicTerm @relation(fields: [termId], references: [id])

  @@unique([studentId, termId], name: "uniq_student_term_result")
}

/// *
///  * =========================
///  * Feedback (student -> teacher)
///  * =========================
model Feedback {
  id        Int          @id @default(autoincrement())
  studentId Int
  staffId   Int
  subjectId Int
  termId    Int
  rating    Int
  comments  String?
  createdAt DateTime     @default(now())
  staff     Staff        @relation("FeedbackToStaff", fields: [staffId], references: [id])
  student   Student      @relation(fields: [studentId], references: [id])
  subject   Subject      @relation(fields: [subjectId], references: [id])
  term      AcademicTerm @relation(fields: [termId], references: [id])

  @@unique([studentId, staffId, subjectId, termId], name: "uniq_feedback_scope")
}

/// *
///  * =========================
///  * Messaging / notifications
///  * =========================
model MessageLog {
  id          Int            @id @default(autoincrement())
  studentId   Int
  messageType MessageType
  channel     MessageChannel
  payload     Json?
  status      MessageStatus  @default(PENDING)
  providerId  String?
  sentAt      DateTime?
  createdAt   DateTime       @default(now())
  student     Student        @relation(fields: [studentId], references: [id])

  @@index([studentId, messageType, createdAt])
}

/// *
///  * =========================
///  * Help / support & password reset
///  * =========================
model HelpRequest {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

/// *
///  * =========================
///  * Official Calendar (Holidays)
///  * =========================
model Holiday {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime @unique
  createdAt DateTime @default(now())
}

/// *
///  * =========================
///  * Audit / logs
///  * =========================
model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String
  actorId   Int?
  staffId   Int?
  meta      Json?
  createdAt DateTime @default(now())
  actor     User?    @relation("AuditByUser", fields: [actorId], references: [id])
  staff     Staff?   @relation("AuditOnStaff", fields: [staffId], references: [id])

  @@index([actorId, createdAt])
}

model AdmissionForm {
  id        Int        @id @default(autoincrement())
  name      String
  email     String
  phone     String
  course    String
  status    FormStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ContactForm {
  id        Int        @id @default(autoincrement())
  name      String
  email     String
  message   String
  status    FormStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Shift {
  MORNING
  EVENING
}

enum EnrollmentStatus {
  ACTIVE
  TRANSFERRED
  COMPLETED
  DROPPED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum MessageType {
  ABSENCE_ALERT
  MARKS_ALERT
  GENERAL
}

enum MessageChannel {
  SMS
  EMAIL
}

enum MessageStatus {
  PENDING
  SENT
  FAILED
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum FormStatus {
  PENDING
  REVIEWED
  RESOLVED
}

/// *
///  * =========================
///  * Enums
///  * =========================
enum Role {
  STUDENT
  STAFF
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Category {
  GEN
  OBC
  SC
  ST
}

/// *
///  * =========================
///  * Leave Applications
///  * =========================
model LeaveApplication {
  id              Int                @id @default(autoincrement())
  studentId       Int
  staffId         Int
  startDate       DateTime
  endDate         DateTime
  reason          String
  letterUrl       String?
  status          LeaveStatus        @default(PENDING)
  staffComments   String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  student         Student            @relation(fields: [studentId], references: [id])
  staff           Staff              @relation(fields: [staffId], references: [id])
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}
